import os
from os.path import dirname, join
import sqlite3
from dotenv import load_dotenv
import logging
from datetime import datetime
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.helper import Helper, HelperMode, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from language import languages
import utilites as u

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞, –∏–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .env, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î

dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)
TOKEN = os.environ.get('TOKEN')
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
conn = sqlite3.connect('users.db')
logging.basicConfig(
    filename='errors.log',
    format='%(asctime)s %(levelname)s %(name)s %(message)s',
    level=logging.ERROR
)
num_SCP = ''
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–¥–ø–∏—Å—è–º–∏
button_search = KeyboardButton('–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–∏—Å–∫–∞')
button_name_search = KeyboardButton('–ü–æ–∏—Å–∫ SCP')
button_menu = KeyboardButton('–ú–µ–Ω—é')
button_profile = KeyboardButton('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –∏–º —Å–≤–æ–π—Å—Ç–≤
return_profile = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(button_profile)
greet_search = ReplyKeyboardMarkup(
    resize_keyboard=True, one_time_keyboard=True
).row(button_menu).add(button_search)
markup_menu = ReplyKeyboardMarkup(resize_keyboard=True).row(button_profile).add(
    button_name_search)
markup_profile = ReplyKeyboardMarkup(resize_keyboard=True).row(button_menu).add(
    button_name_search)


class States(Helper):
    mode = HelperMode.snake_case
    STATE1_WORK = ListItem()  # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
    STATE2_SEARCH = ListItem()  # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ SCP –æ–±—ä–µ–∫—Ç–∞

    STATE4_PHOTO = ListItem()  # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ
    STATE5_NAME = ListItem()  # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å–º–µ–Ω—ã –Ω–∏–∫–∞ –∏ —Ñ–æ—Ç–æ


@dp.message_handler(commands=['start'])  # –ü–µ—Ä–≤—ã–π —Å—Ç–∞—Ä—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å
async def send_welcome(msg: types.Message):
    state = dp.current_state(user=msg.from_user.id)
    print(States.all())
    await state.set_state(States.all()[0])

    await msg.reply(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {msg.from_user.first_name}. –ê—Ä—Ö–∏–≤ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.',
                    reply_markup=markup_menu)
    cur = conn.cursor()
    date_time_str = datetime.now()
    if not cur.execute(
            f'''SELECT * FROM users WHERE userid = {msg.from_user.id}''').fetchall():  # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–Ω–µ—Å—ë–Ω –≤ –ë–î
        sql = '''INSERT INTO users(userid, username, name,  level, number_of_requests, number_of_bugs, date_of_registration, 
        photo, nickname, language, last_scp) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''
        data_tuple = (msg.from_user.id, msg.from_user.username, msg.from_user.first_name, 1, 0, 0,
                      date_time_str.replace(microsecond=0),
                      'AgACAgIAAxkBAAIDd2JcUPUnu4OrqO59i9-M4FSRz3CmAALauDEbwQLoSo_J1EadLNMAAQEAAwIAA3MAAyQE', msg.from_user.username,
                      'RU', 0)
        cur.execute(sql, data_tuple)
        conn.commit()


@dp.message_handler(commands=['start'], state=States.all())  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
async def send_welcome(msg: types.Message):
    state = dp.current_state(user=msg.from_user.id)
    await state.set_state(States.all()[0])
    await msg.reply(f'{msg.from_user.first_name}, –ø–æ–∏—Å–∫–æ–≤–∏–∫ –ø–µ—Ä–µ–ø—É—â–µ–Ω.',
                    reply_markup=markup_menu)


@dp.message_handler(commands=['help'], state=States.all())
async def helper(msg: types.Message):  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ help
    state = dp.current_state(user=msg.from_user.id)
    await state.set_state(States.all()[0])
    await msg.reply(
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤ SCP Foundation\n \n \n –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫ scp –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç—å–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ. \n'
        '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è \n \n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @vardabomb')


@dp.message_handler(commands=['change_language'], state=States.all())
async def lang(msg: types.Message):
    print(1)
    argument = msg.get_args()
    cur = conn.cursor()
    language = cur.execute(f'''SELECT language FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
    print(2)
    if argument in ('RU', 'EN'):
        print(3)
        print(argument)
        print(msg.from_user.id)
        print(f"""UPDATE users SET language = '{argument}' WHERE userid = {msg.from_user.id}""")
        cur.execute(f"""UPDATE users SET language = '{argument}' WHERE userid = {msg.from_user.id}""")
        conn.commit()
        print(4)
        print(5)
        await msg.answer(text=languages['Successfully'][language] + 'üëç')
        print(6)
    else:
        await msg.answer(languages['lang_no_arg'][language])


@dp.callback_query_handler(Text(startswith="search_"),
                           state=States.STATE2_SEARCH)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –ø–æ–∏—Å–∫–∞ SCP
async def callbacks_num(call: types.CallbackQuery):
    cur = conn.cursor()
    num_SCP = cur.execute(f'''SELECT last_scp FROM users WHERE userid = {call.from_user.id}''').fetchall()[0][0]
    action = call.data.split("_")[1]

    if action == "front":  # –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ SCP
        print('–í–ø–µ—Ä–µ–¥')
        info = u.browse(f'{int(num_SCP) + 1}', call.message.chat.id)  # TODO ERROR
        print(1)
        print(info['text'])
        await bot.send_photo(call.message.chat.id, info['img'])
        for x in range(0, len(info['text']), 4096):
            await bot.send_message(call.message.chat.id, info['text'][x:x + 4096])
            print(1)
        await call.answer()

    elif action == 'stop':  # –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        print('–°—Ç–æ–ø')
        state = dp.current_state(user=call.from_user.id)
        await state.set_state(States.all()[0])
        await bot.send_message(call.message.chat.id, '–ò –≤–æ—Ç –≤—ã —Å–Ω–æ–≤–∞ –≤ –º–µ–Ω—é', reply_markup=markup_menu)
        await call.answer()

    elif action == "behind":  # –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ SCP
        print('–ù–∞–∑–∞–¥')
        info = u.browse(f'{int(num_SCP) - 1}', call.message.chat.id)
        print(info['text'])
        await bot.send_photo(call.message.chat.id, info['img'])
        for x in range(0, len(info['text']), 4096):
            await bot.send_message(call.message.chat.id, info['text'][x:x + 4096])
            print(1)
        await call.answer()


@dp.callback_query_handler(Text(startswith="change_"),
                           state=States.STATE1_WORK)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –∏ —Ñ–æ—Ç–æ
async def callbacks_num(call: types.CallbackQuery):
    action = call.data.split("_")[1]
    if action == "photo":  # –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ
        await bot.send_message(call.message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")
        state = dp.current_state(user=call.from_user.id)
        await state.set_state(States.all()[2])
        await call.answer()
    elif action == 'name':  # –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏
        await bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è')
        state = dp.current_state(user=call.from_user.id)
        await state.set_state(States.all()[3])
        await call.answer()


@dp.message_handler(Text(equals="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
                    state=States.STATE1_WORK | States.STATE4_PHOTO)  # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def with_puree(msg: types.Message):
    await msg.reply("–≠—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å, –ª—é–±—É–π—Ç–µ—Å—å", reply_markup=markup_profile)
    cur = conn.cursor()
    profile = cur.execute(f'''SELECT * FROM users WHERE userid = {msg.from_user.id}''').fetchall()
    conn.commit()
    await bot.send_photo(msg.chat.id, str(profile[0][7]))
    await bot.send_message(msg.chat.id,
                           f'–ò–º—è: {profile[0][8]}.\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {profile[0][6]}.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {profile[0][4]}.\n'
                           f'–£—Ä–æ–≤–µ–Ω—å {profile[0][3]}.\n \n–ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤',
                           reply_markup=u.get_keyboard_change())


@dp.message_handler(Text(equals="–ú–µ–Ω—é"), state=States.all())  # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def with_puree(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(States.all()[0])
    await message.reply("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=markup_menu)


@dp.message_handler(Text(equals="–ü–æ–∏—Å–∫ SCP"),
                    state=States.STATE1_WORK)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ SCP –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def with_puree(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä SCP", reply_markup=greet_search)
    state = dp.current_state(user=message.from_user.id)
    await state.set_state(States.all()[1])  # –í–æ—Ç —Ç—É—Ç –≤–∫–ª—é—á–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞


@dp.message_handler(Text(equals="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–∏—Å–∫–∞"),
                    state=States.STATE2_SEARCH)  # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± SCP –æ–±—ä–µ–∫—Ç–µ
async def with_puree(msg: types.Message):
    cur = conn.cursor()
    num_SCP = cur.execute(f'''SELECT last_scp FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
    if num_SCP:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –≤–≤–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–æ–±—â–µ –Ω–æ–º–µ—Ä SCP
        info = u.browse(f'{num_SCP}', msg.chat.id)
        await bot.send_photo(msg.chat.id, info['img'])
        for x in range(0, len(info['text']), 4096):
            await bot.send_message(msg.chat.id, info['text'][x:x + 4096])
        await bot.send_message(msg.chat.id, u.phrasebook['end_search'],
                               reply_markup=u.get_keyboard_search(num_SCP))
    else:
        await msg.reply('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä SCP')


@dp.message_handler(state=States.STATE5_NAME)  # –ü—Ä–∏–µ–º –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ —Å–º–µ–Ω–∞ –µ–≥–æ –≤ –ë–î
async def get_text_messages(msg: types.Message):
    await msg.reply('C —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —è –±—É–¥—É –∑–≤–∞—Ç—å –≤–∞—Å ' + msg.text)
    cur = conn.cursor()
    cur.execute(f"""UPDATE users SET nickname = '{msg.text}' WHERE userid = {msg.from_user.id}""")
    conn.commit()

    state = dp.current_state(user=msg.from_user.id)
    await state.set_state(States.all()[0])


@dp.message_handler(content_types=[types.ContentType.PHOTO],
                    state=States.STATE4_PHOTO)  # –ü—Ä–∏–µ–º –Ω–æ–≤–æ–≥–æ –§–æ—Ç–æ  –ø—Ä–æ—Ñ–∏–ª—è–∏ —Å–º–µ–Ω–∞ –µ–≥–æ –≤ –ë–î
async def edit_photo(msg: types.Message):
    document_id = msg.photo[0].file_id
    file_info = await bot.get_file(document_id)
    cur = conn.cursor()
    cur.execute(f"""UPDATE users SET photo = '{file_info.file_id}' WHERE userid = {msg.from_user.id}""")
    conn.commit()
    await bot.send_message(msg.from_user.id, '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è  —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞')


@dp.message_handler(content_types=[types.ContentType.TEXT],
                    state=States.STATE4_PHOTO)  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ
async def edit_photo(msg: types.Message):
    await msg.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –ª–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=return_profile)


@dp.message_handler()  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–µ–∑ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
async def echo_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é /start')


@dp.message_handler(state=States.STATE2_SEARCH)  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ SCP
async def with_puree(message: types.Message):
    cur = conn.cursor()
    if message['text'].isdigit():
        cur.execute(f'''UPDATE users SET last_scp = {message['text']} WHERE userid = {message.from_user.id}''')
        conn.commit()
        await message.reply("–í–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä SCP –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤")


@dp.message_handler(content_types=[types.ContentType.TEXT],
                    state=States.STATE1_WORK)  # –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ 1 —Å—Ç–∞—Ç—É—Å–µ
async def get_text_messages(msg: types.Message):
    await msg.reply(
        f'{msg.from_user.first_name}, –∞—Ä—Ö–∏–≤ –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.')


async def shutdown(dispatcher: Dispatcher):  # –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__ == '__main__':
    executor.start_polling(dp)