import os
from os.path import dirname, join
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import sqlite3
from dotenv import load_dotenv
from utilites import get_content
import logging
import requests
from bs4 import BeautifulSoup
from datetime import datetime

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞, –∏–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ .env, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)
TOKEN = os.environ.get('TOKEN')
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
conn = sqlite3.connect('users.db')
logging.basicConfig(
    filename='errors.log',
    format='%(asctime)s %(levelname)s %(name)s %(message)s',
    level=logging.ERROR
)
profile = ''
languages = {
    'help': {
        'RU': '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤ SCP Foundation\n \n \n/browse *–Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞* - –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç—å–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ \n'
              '/profile - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è \n/change_language *language* - –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ (–¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ RU, EN)\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @vardabomb',
        'EN': 'Here you can find the full SCP Foundation archive\n \n \n/browse *object number* - to search for an article about the object \n'
              '/profile - to view the profile \n/change_language *language* - to change the language (available languages RU, EN)\n \n'
              'Any questions contact @vardabomb'
    },
    'Successfully': {
        'RU': '–£—Å–ø–µ—à–Ω–æ',
        'EN': 'Successfully'
    },
    'edit_photo': {
        'RU': '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:',
        'EN': 'Submit a new photo:'
    },
    'change_photo': {
        'RU': '–ö—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –Ω–æ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ?',
        'EN': 'Very nice photo, but what do you want?'
    },
    'language_error': {
        'RU': '–Ø –≤—Å—ë –æ–±—ã—Å–∫–∞–ª, –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞—à—ë–ª —Ç–æ–≥–æ, —á–µ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏, –∏–ª–∏ –∂–µ —è –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É.',
        'EN': "I searched everywhere, didn't find what you wanted anywhere, or I made a mistake."
    },
    'error_in_typing': {
        'RU': f'–ê—Ä—Ö–∏–≤ –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.',
        'EN': f'Cannot archive this type of information, tag the command.'
    }
}

@dp.message_handler(commands=['start'])  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def send_welcome(msg: types.Message):
    await msg.reply(f'Hello, my name is ScpArchive. Nice to meet you, {msg.from_user.first_name}!')
    cur = conn.cursor()
    date_time_str = datetime.now()
    if not cur.execute(
            f'''SELECT * FROM users WHERE userid = {msg.from_user.id}''').fetchall():  # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–Ω–µ—Å—ë–Ω –≤ –ë–î
        sql = '''INSERT INTO users(userid, username, name,  level, number_of_requests, number_of_bugs, date_of_registration, 
        photo, nickname, language, change_photo) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'''
        data_tuple = (msg.from_user.id, msg.from_user.username, msg.from_user.first_name, 1, 0, 0,
                      date_time_str.replace(microsecond=0),
                      'AgACAgIAAxkBAAIDd2JcUPUnu4OrqO59i9-M4FSRz3CmAALauDEbwQLoSo_J1EadLNMAAQEAAwIAA3MAAyQE',
                      msg.from_user.username, 'EN', 'False')
        cur.execute(sql, data_tuple)
        conn.commit()


@dp.message_handler(commands=['help'])
async def helper(msg: types.Message):  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ help
    cur = conn.cursor()
    cur.execute(f'''UPDATE users SET change_photo = 'False' WHERE userid = {msg.from_user.id}''')
    language = cur.execute(f'''SELECT language FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
    conn.commit()
    await msg.reply(languages['help'][language])


@dp.message_handler(commands=['change_language'])
async def helper(msg: types.Message):
    argument = msg.get_args()
    cur = conn.cursor()
    cur.execute(f'''UPDATE users SET change_photo = 'False' WHERE userid = {msg.from_user.id}''')
    if argument in ('RU', 'EN'):
        cur.execute(f"""UPDATE users SET language = '{argument}' WHERE userid = {msg.from_user.id}""")
        language = cur.execute(f'''SELECT language FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
        conn.commit()
        await msg.answer(text=languages['Successfully'][language] + 'üëç')


@dp.message_handler(commands=['profile'])
async def profile(msg: types.Message):  # —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    cur = conn.cursor()
    cur.execute(f'''UPDATE users SET change_photo = 'False' WHERE userid = {msg.from_user.id}''')
    profile = cur.execute(f'''SELECT * FROM users WHERE userid = {msg.from_user.id}''').fetchall()
    language = cur.execute(f'''SELECT language FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
    conn.commit()
    profile1 = {
        'RU': f'–ò–º—è: {profile[0][8]}.\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {profile[0][6]}.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {profile[0][4]}.\n'
              f'–£—Ä–æ–≤–µ–Ω—å {profile[0][3]}.\n \n–ß—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–µ–ª–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤\n \n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n'
              f'/edit_nickname - –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è.\n/edit_photo - –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é',
        'EN': f'Name: {profile[0][8]}.\nRegistration Date: {profile[0][6]}.\nNumber of requests: {profile[0][4]}.\n'
              f'Level {profile[0][3]}.\n \nMake more requests to level up\n \nFeatures:\n'
              f'/edit_nickname *new nickname* - to change name.\n/edit_photo - to change photo'
    }
    await bot.send_photo(msg.chat.id, str(profile[0][7]))  # –í—ã–≤–æ–¥ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await bot.send_message(msg.chat.id, profile1[language])


@dp.message_handler(commands=['edit_photo'])
async def edit_photo(msg: types.Message):  # –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î –±–æ—Ç–∞
    cur = conn.cursor()
    cur.execute(f'''UPDATE users SET change_photo = 'True' WHERE userid = {msg.from_user.id}''')
    language = cur.execute(f'''SELECT language FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
    conn.commit()
    await bot.send_message(msg.chat.id, languages['edit_photo'][language])


@dp.message_handler(commands=['edit_nickname'])
async def edit_nickname(msg: types.Message):  # –°–º–µ–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –æ—Å–Ω–æ–≤–Ω–æ–π username —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
    argument = msg.get_args()
    cur = conn.cursor()
    cur.execute(f'''UPDATE users SET change_photo = 'False' WHERE userid = {msg.from_user.id}''')
    if argument:
        argument = msg.get_args()
        language = cur.execute(f'''SELECT language FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
        cur.execute(f"""UPDATE users SET nickname = '{argument}' WHERE userid = {msg.from_user.id}""")
        conn.commit()
        await msg.answer(text=languages['Successfully'][language] + 'üëç')


@dp.message_handler(content_types=[types.ContentType.PHOTO])
async def edit_photo(msg: types.Message):  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
    cur = conn.cursor()
    change_photo = cur.execute(f'''SELECT change_photo FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
    if change_photo == 'True':
        document_id = msg.photo[0].file_id
        file_info = await bot.get_file(document_id)
        language = cur.execute(f'''SELECT language FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
        cur.execute(
            f"""UPDATE users SET photo = '{file_info.file_id}' WHERE userid = {msg.from_user.id}""")  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –ë–î
        cur.execute(f'''UPDATE users SET change_photo = 'False' WHERE userid = {msg.from_user.id}''')
        conn.commit()
        await msg.answer(text=languages['Successfully'][language] + 'üëç')
    else:
        cur = conn.cursor()
        language = cur.execute(f'''SELECT language FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
        await bot.send_message(msg.chat.id, languages['change_photo'][language])


@dp.message_handler(commands=['browse'])  # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ scp –æ–±—ä–µ–∫—Ç–∞, –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞
async def browse(msg: types.Message):
    cur = conn.cursor()
    cur.execute(f'''UPDATE users SET change_photo = 'False' WHERE userid = {msg.from_user.id}''')
    language = cur.execute(f'''SELECT language FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
    argument = msg.get_args()  # –ê—Ä–≥—É–º–µ–Ω—Ç, —Ç–æ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    if len(argument) < 3:
        argument = '0' * (3 - len(argument)) + argument
    if argument:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–ª–∏ –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç
        try:  # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø–∏—à–µ–º —á—Ç–æ –Ω–µ –Ω–∞—à–ª–∏
            browse = {
                'RU': f'http://scp-ru.wikidot.com/scp-{argument}',
                'EN': f'https://scp-wiki.wikidot.com/scp-{argument}'
            }
            print(browse[language])
            info = get_content(browse[language], id='page-title') + '\n' + \
                   get_content(browse[language])  # –°–æ–∑–¥–∞—ë–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            text = requests.get(browse[language]).text
            try:
                if language == 'RU':
                    await bot.send_photo(msg.chat.id,
                                         BeautifulSoup(text, 'html.parser').find(class_="rimg").find(
                                             class_="image").get(
                                             'src'))
                elif language == 'EN':
                    await bot.send_photo(msg.chat.id,
                                         BeautifulSoup(text, 'html.parser').find(
                                             class_="scp-image-block block-right").find(class_="image").get('src'))
            except:
                await bot.send_photo(msg.chat.id,
                                     'AgACAgIAAxkBAAIDd2JcUPUnu4OrqO59i9-M4FSRz3CmAALauDEbwQLoSo_J1EadLNMAAQEAAwIAA3MAAyQE')
            if len(
                    info) > 4096:  # –ï—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ç–æ –º—ã –¥–µ–ª–∏–º –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram
                for x in range(0, len(info), 4096):
                    await bot.send_message(msg.chat.id, info[x:x + 4096])
            else:
                await bot.send_message(msg.chat.id, info)
            cur = conn.cursor()
            cur.execute(
                f'''UPDATE users SET number_of_requests = number_of_requests + 1 WHERE userid = {msg.from_user.id}''')
            requests_n = cur.execute(
                f'''SELECT number_of_requests FROM users WHERE userid = {msg.from_user.id}''').fetchall()
            lvl = cur.execute(f'''SELECT level FROM users WHERE userid = {msg.from_user.id}''').fetchall()
            requests_n = int(requests_n[0][0])
            lvl = int(lvl[0][0])
            # –ü–µ—Ä–µ–±–æ—Ä —É—Ä–æ–≤–Ω–µ–π –∏ –∫–æ–ª-–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            if lvl < 2 and requests_n >= 125:
                cur.execute(
                    f"""UPDATE users SET level = '2' WHERE userid = {msg.from_user.id}""")
            elif lvl < 3 and requests_n >= 225:
                cur.execute(
                    f"""UPDATE users SET level = '3' WHERE userid = {msg.from_user.id}""")
            elif lvl < 4 and requests_n >= 350:
                cur.execute(
                    f"""UPDATE users SET level = '4' WHERE userid = {msg.from_user.id}""")
            elif lvl < 5 and requests_n >= 500:
                cur.execute(
                    f"""UPDATE users SET level = '5' WHERE userid = {msg.from_user.id}""")
            elif lvl < 6 and requests_n >= 675:
                cur.execute(
                    f"""UPDATE users SET level = '6' WHERE userid = {msg.from_user.id}""")
            elif requests_n >= 900:
                cur.execute(
                    f"""UPDATE users SET level = '7' WHERE userid = {msg.from_user.id}""")
            conn.commit()  # –ü—Ä–∏–±–∞–≤–ª—è–µ–º 1 –∫ –∫–æ–ª-–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è
        except Exception as e:  # –ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π —Ä–∞–∑—Ä—è–¥–∞ ERROR –∏–ª–∏ FATAL, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—è–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –æ—Ç —Å–∞–º–æ–≥–æ aiogram
            logging.error(' '.join([str(msg.from_user.id), msg.from_user.username, str(e)]))
            cur = conn.cursor()
            cur.execute(  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –≤ –±—É–¥—É—â–µ–º
                f'''UPDATE users SET number_of_bugs = number_of_bugs + 1 WHERE userid = {msg.from_user.id}''')
            conn.commit()
            await msg.reply(languages['language_error'][language])
    else:
        await msg.reply(languages['language_error'][language])


@dp.message_handler(content_types=[types.ContentType.ANY])  # –®–∞–±–ª–æ–Ω –ø—Ä–∏–µ–º–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def get_text_messages(msg: types.Message):
    cur = conn.cursor()
    cur.execute(f'''UPDATE users SET change_photo = 'False' WHERE userid = {msg.from_user.id}''')
    language = cur.execute(f'''SELECT language FROM users WHERE userid = {msg.from_user.id}''').fetchall()[0][0]
    conn.commit()
    await msg.reply(languages['error_in_typing'][language])

if __name__ == '__main__':
    executor.start_polling(dp)
